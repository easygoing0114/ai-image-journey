"use strict";(this.webpackChunkmermaid=this.webpackChunkmermaid||[]).push([[532],{9532:(t,e,a)=>{a.d(e,{a:()=>insertMarkers$1,b:()=>clear$1,c:()=>createLabel$1,d:()=>clear,e:()=>insertNode,f:()=>insertEdgeLabel,g:()=>getSubGraphTitleMargins,h:()=>insertEdge,i:()=>intersectRect$1,j:()=>positionEdgeLabel,k:()=>getLineFunctionsWithOffset,l:()=>labelHelper,m:()=>addEdgeMarkers,p:()=>positionNode,s:()=>setNodeElem,u:()=>updateNodeBounds});var r=a(9466),n=a(8918),i=a(4658);const s={extension:(t,e,a)=>{r.l.trace("Making markers for ",a),t.append("defs").append("marker").attr("id",a+"_"+e+"-extensionStart").attr("class","marker extension "+e).attr("refX",18).attr("refY",7).attr("markerWidth",190).attr("markerHeight",240).attr("orient","auto").append("path").attr("d","M 1,7 L18,13 V 1 Z"),t.append("defs").append("marker").attr("id",a+"_"+e+"-extensionEnd").attr("class","marker extension "+e).attr("refX",1).attr("refY",7).attr("markerWidth",20).attr("markerHeight",28).attr("orient","auto").append("path").attr("d","M 1,1 V 13 L18,7 Z")},composition:(t,e,a)=>{t.append("defs").append("marker").attr("id",a+"_"+e+"-compositionStart").attr("class","marker composition "+e).attr("refX",18).attr("refY",7).attr("markerWidth",190).attr("markerHeight",240).attr("orient","auto").append("path").attr("d","M 18,7 L9,13 L1,7 L9,1 Z"),t.append("defs").append("marker").attr("id",a+"_"+e+"-compositionEnd").attr("class","marker composition "+e).attr("refX",1).attr("refY",7).attr("markerWidth",20).attr("markerHeight",28).attr("orient","auto").append("path").attr("d","M 18,7 L9,13 L1,7 L9,1 Z")},aggregation:(t,e,a)=>{t.append("defs").append("marker").attr("id",a+"_"+e+"-aggregationStart").attr("class","marker aggregation "+e).attr("refX",18).attr("refY",7).attr("markerWidth",190).attr("markerHeight",240).attr("orient","auto").append("path").attr("d","M 18,7 L9,13 L1,7 L9,1 Z"),t.append("defs").append("marker").attr("id",a+"_"+e+"-aggregationEnd").attr("class","marker aggregation "+e).attr("refX",1).attr("refY",7).attr("markerWidth",20).attr("markerHeight",28).attr("orient","auto").append("path").attr("d","M 18,7 L9,13 L1,7 L9,1 Z")},dependency:(t,e,a)=>{t.append("defs").append("marker").attr("id",a+"_"+e+"-dependencyStart").attr("class","marker dependency "+e).attr("refX",6).attr("refY",7).attr("markerWidth",190).attr("markerHeight",240).attr("orient","auto").append("path").attr("d","M 5,7 L9,13 L1,7 L9,1 Z"),t.append("defs").append("marker").attr("id",a+"_"+e+"-dependencyEnd").attr("class","marker dependency "+e).attr("refX",13).attr("refY",7).attr("markerWidth",20).attr("markerHeight",28).attr("orient","auto").append("path").attr("d","M 18,7 L9,13 L14,7 L9,1 Z")},lollipop:(t,e,a)=>{t.append("defs").append("marker").attr("id",a+"_"+e+"-lollipopStart").attr("class","marker lollipop "+e).attr("refX",13).attr("refY",7).attr("markerWidth",190).attr("markerHeight",240).attr("orient","auto").append("circle").attr("stroke","black").attr("fill","transparent").attr("cx",7).attr("cy",7).attr("r",6),t.append("defs").append("marker").attr("id",a+"_"+e+"-lollipopEnd").attr("class","marker lollipop "+e).attr("refX",1).attr("refY",7).attr("markerWidth",190).attr("markerHeight",240).attr("orient","auto").append("circle").attr("stroke","black").attr("fill","transparent").attr("cx",7).attr("cy",7).attr("r",6)},point:(t,e,a)=>{t.append("marker").attr("id",a+"_"+e+"-pointEnd").attr("class","marker "+e).attr("viewBox","0 0 10 10").attr("refX",6).attr("refY",5).attr("markerUnits","userSpaceOnUse").attr("markerWidth",12).attr("markerHeight",12).attr("orient","auto").append("path").attr("d","M 0 0 L 10 5 L 0 10 z").attr("class","arrowMarkerPath").style("stroke-width",1).style("stroke-dasharray","1,0"),t.append("marker").attr("id",a+"_"+e+"-pointStart").attr("class","marker "+e).attr("viewBox","0 0 10 10").attr("refX",4.5).attr("refY",5).attr("markerUnits","userSpaceOnUse").attr("markerWidth",12).attr("markerHeight",12).attr("orient","auto").append("path").attr("d","M 0 5 L 10 10 L 10 0 z").attr("class","arrowMarkerPath").style("stroke-width",1).style("stroke-dasharray","1,0")},circle:(t,e,a)=>{t.append("marker").attr("id",a+"_"+e+"-circleEnd").attr("class","marker "+e).attr("viewBox","0 0 10 10").attr("refX",11).attr("refY",5).attr("markerUnits","userSpaceOnUse").attr("markerWidth",11).attr("markerHeight",11).attr("orient","auto").append("circle").attr("cx","5").attr("cy","5").attr("r","5").attr("class","arrowMarkerPath").style("stroke-width",1).style("stroke-dasharray","1,0"),t.append("marker").attr("id",a+"_"+e+"-circleStart").attr("class","marker "+e).attr("viewBox","0 0 10 10").attr("refX",-1).attr("refY",5).attr("markerUnits","userSpaceOnUse").attr("markerWidth",11).attr("markerHeight",11).attr("orient","auto").append("circle").attr("cx","5").attr("cy","5").attr("r","5").attr("class","arrowMarkerPath").style("stroke-width",1).style("stroke-dasharray","1,0")},cross:(t,e,a)=>{t.append("marker").attr("id",a+"_"+e+"-crossEnd").attr("class","marker cross "+e).attr("viewBox","0 0 11 11").attr("refX",12).attr("refY",5.2).attr("markerUnits","userSpaceOnUse").attr("markerWidth",11).attr("markerHeight",11).attr("orient","auto").append("path").attr("d","M 1,1 l 9,9 M 10,1 l -9,9").attr("class","arrowMarkerPath").style("stroke-width",2).style("stroke-dasharray","1,0"),t.append("marker").attr("id",a+"_"+e+"-crossStart").attr("class","marker cross "+e).attr("viewBox","0 0 11 11").attr("refX",-1).attr("refY",5.2).attr("markerUnits","userSpaceOnUse").attr("markerWidth",11).attr("markerHeight",11).attr("orient","auto").append("path").attr("d","M 1,1 l 9,9 M 10,1 l -9,9").attr("class","arrowMarkerPath").style("stroke-width",2).style("stroke-dasharray","1,0")},barb:(t,e,a)=>{t.append("defs").append("marker").attr("id",a+"_"+e+"-barbEnd").attr("refX",19).attr("refY",7).attr("markerWidth",20).attr("markerHeight",14).attr("markerUnits","strokeWidth").attr("orient","auto").append("path").attr("d","M 19,7 L9,13 L14,7 L9,1 Z")}},insertMarkers$1=(t,e,a,r)=>{e.forEach(e=>{s[e](t,a,r)})};const createLabel$1=(t,e,a,i)=>{let s=t||"";"object"==typeof s&&(s=s[0]);const l=(0,r.c)();if((0,r.m)(l.flowchart.htmlLabels)){s=s.replace(/\\n|\n/g,"<br />"),r.l.debug("vertexText"+s);let t=function addHtmlLabel(t,e){const a=(0,n.Ltv)(document.createElementNS("http://www.w3.org/2000/svg","foreignObject")),i=a.append("xhtml:div"),s=t.label,l=t.isNode?"nodeLabel":"edgeLabel";return i.html((0,r.d)('<span class="'+l+'" '+(t.labelStyle?'style="'+t.labelStyle+'"':"")+">"+s+"</span>",e)),function applyStyle(t,e){e&&t.attr("style",e)}(i,t.labelStyle),i.style("display","inline-block"),i.style("white-space","nowrap"),i.attr("xmlns","http://www.w3.org/1999/xhtml"),a.node()}({isNode:i,label:(0,r.M)(s).replace(/fa[blrs]?:fa-[\w-]+/g,t=>`<i class='${t.replace(":"," ")}'></i>`),labelStyle:e.replace("fill:","color:")},l);return t}{const t=document.createElementNS("http://www.w3.org/2000/svg","text");t.setAttribute("style",e.replace("color:","fill:"));let r=[];r="string"==typeof s?s.split(/\\n|\n|<br\s*\/?>/gi):Array.isArray(s)?s:[];for(const e of r){const r=document.createElementNS("http://www.w3.org/2000/svg","tspan");r.setAttributeNS("http://www.w3.org/XML/1998/namespace","xml:space","preserve"),r.setAttribute("dy","1em"),r.setAttribute("x","0"),a?r.setAttribute("class","title-row"):r.setAttribute("class","row"),r.textContent=e.trim(),t.appendChild(r)}return t}},labelHelper=async(t,e,a,s)=>{let l;const o=e.useHtmlLabels||(0,r.m)((0,r.c)().flowchart.htmlLabels);l=a||"node default";const d=t.insert("g").attr("class",l).attr("id",e.domId||e.id),h=d.insert("g").attr("class","label").attr("style",e.labelStyle);let c;c=void 0===e.labelText?"":"string"==typeof e.labelText?e.labelText:e.labelText[0];const y=h.node();let p;p="markdown"===e.labelType?(0,i.a)(h,(0,r.d)((0,r.M)(c),(0,r.c)()),{useHtmlLabels:o,width:e.width||(0,r.c)().flowchart.wrappingWidth,classes:"markdown-node-label"}):y.appendChild(createLabel$1((0,r.d)((0,r.M)(c),(0,r.c)()),e.labelStyle,!1,s));let g=p.getBBox();const x=e.padding/2;if((0,r.m)((0,r.c)().flowchart.htmlLabels)){const t=p.children[0],e=(0,n.Ltv)(p),a=t.getElementsByTagName("img");if(a){const t=""===c.replace(/<img[^>]*>/g,"").trim();await Promise.all([...a].map(e=>new Promise(a=>{function setupImage(){if(e.style.display="flex",e.style.flexDirection="column",t){const t=(0,r.c)().fontSize?(0,r.c)().fontSize:window.getComputedStyle(document.body).fontSize,a=5,n=parseInt(t,10)*a+"px";e.style.minWidth=n,e.style.maxWidth=n}else e.style.width="100%";a(e)}setTimeout(()=>{e.complete&&setupImage()}),e.addEventListener("error",setupImage),e.addEventListener("load",setupImage)})))}g=t.getBoundingClientRect(),e.attr("width",g.width),e.attr("height",g.height)}return o?h.attr("transform","translate("+-g.width/2+", "+-g.height/2+")"):h.attr("transform","translate(0, "+-g.height/2+")"),e.centerLabel&&h.attr("transform","translate("+-g.width/2+", "+-g.height/2+")"),h.insert("rect",":first-child"),{shapeSvg:d,bbox:g,halfPadding:x,label:h}},updateNodeBounds=(t,e)=>{const a=e.node().getBBox();t.width=a.width,t.height=a.height};function insertPolygonShape(t,e,a,r){return t.insert("polygon",":first-child").attr("points",r.map(function(t){return t.x+","+t.y}).join(" ")).attr("class","label-container").attr("transform","translate("+-e/2+","+a/2+")")}function intersectEllipse(t,e,a,r){var n=t.x,i=t.y,s=n-r.x,l=i-r.y,o=Math.sqrt(e*e*l*l+a*a*s*s),d=Math.abs(e*a*s/o);r.x<n&&(d=-d);var h=Math.abs(e*a*l/o);return r.y<i&&(h=-h),{x:n+d,y:i+h}}function intersectLine(t,e,a,r){var n,i,s,l,o,d,h,c,y,p,g,x,f;if(n=e.y-t.y,s=t.x-e.x,o=e.x*t.y-t.x*e.y,y=n*a.x+s*a.y+o,p=n*r.x+s*r.y+o,!(0!==y&&0!==p&&sameSign(y,p)||(i=r.y-a.y,l=a.x-r.x,d=r.x*a.y-a.x*r.y,h=i*t.x+l*t.y+d,c=i*e.x+l*e.y+d,0!==h&&0!==c&&sameSign(h,c)||0===(g=n*l-i*s))))return x=Math.abs(g/2),{x:(f=s*d-l*o)<0?(f-x)/g:(f+x)/g,y:(f=i*o-n*d)<0?(f-x)/g:(f+x)/g}}function sameSign(t,e){return t*e>0}const intersectRect$1=(t,e)=>{var a,r,n=t.x,i=t.y,s=e.x-n,l=e.y-i,o=t.width/2,d=t.height/2;return Math.abs(l)*o>Math.abs(s)*d?(l<0&&(d=-d),a=0===l?0:d*s/l,r=d):(s<0&&(o=-o),a=o,r=0===s?0:o*l/s),{x:n+a,y:i+r}},l={node:function intersectNode(t,e){return t.intersect(e)},circle:function intersectCircle(t,e,a){return intersectEllipse(t,e,e,a)},ellipse:intersectEllipse,polygon:function intersectPolygon(t,e,a){var r=t.x,n=t.y,i=[],s=Number.POSITIVE_INFINITY,l=Number.POSITIVE_INFINITY;"function"==typeof e.forEach?e.forEach(function(t){s=Math.min(s,t.x),l=Math.min(l,t.y)}):(s=Math.min(s,e.x),l=Math.min(l,e.y));for(var o=r-t.width/2-s,d=n-t.height/2-l,h=0;h<e.length;h++){var c=e[h],y=e[h<e.length-1?h+1:0],p=intersectLine(t,a,{x:o+c.x,y:d+c.y},{x:o+y.x,y:d+y.y});p&&i.push(p)}return i.length?(i.length>1&&i.sort(function(t,e){var r=t.x-a.x,n=t.y-a.y,i=Math.sqrt(r*r+n*n),s=e.x-a.x,l=e.y-a.y,o=Math.sqrt(s*s+l*l);return i<o?-1:i===o?0:1}),i[0]):t},rect:intersectRect$1},getArrowPoints=(t,e,a)=>{const r=(t=>{const e=new Set;for(const a of t)switch(a){case"x":e.add("right"),e.add("left");break;case"y":e.add("up"),e.add("down");break;default:e.add(a)}return e})(t),n=e.height+2*a.padding,i=n/2,s=e.width+2*i+a.padding,l=a.padding/2;return r.has("right")&&r.has("left")&&r.has("up")&&r.has("down")?[{x:0,y:0},{x:i,y:0},{x:s/2,y:2*l},{x:s-i,y:0},{x:s,y:0},{x:s,y:-n/3},{x:s+2*l,y:-n/2},{x:s,y:-2*n/3},{x:s,y:-n},{x:s-i,y:-n},{x:s/2,y:-n-2*l},{x:i,y:-n},{x:0,y:-n},{x:0,y:-2*n/3},{x:-2*l,y:-n/2},{x:0,y:-n/3}]:r.has("right")&&r.has("left")&&r.has("up")?[{x:i,y:0},{x:s-i,y:0},{x:s,y:-n/2},{x:s-i,y:-n},{x:i,y:-n},{x:0,y:-n/2}]:r.has("right")&&r.has("left")&&r.has("down")?[{x:0,y:0},{x:i,y:-n},{x:s-i,y:-n},{x:s,y:0}]:r.has("right")&&r.has("up")&&r.has("down")?[{x:0,y:0},{x:s,y:-i},{x:s,y:-n+i},{x:0,y:-n}]:r.has("left")&&r.has("up")&&r.has("down")?[{x:s,y:0},{x:0,y:-i},{x:0,y:-n+i},{x:s,y:-n}]:r.has("right")&&r.has("left")?[{x:i,y:0},{x:i,y:-l},{x:s-i,y:-l},{x:s-i,y:0},{x:s,y:-n/2},{x:s-i,y:-n},{x:s-i,y:-n+l},{x:i,y:-n+l},{x:i,y:-n},{x:0,y:-n/2}]:r.has("up")&&r.has("down")?[{x:s/2,y:0},{x:0,y:-l},{x:i,y:-l},{x:i,y:-n+l},{x:0,y:-n+l},{x:s/2,y:-n},{x:s,y:-n+l},{x:s-i,y:-n+l},{x:s-i,y:-l},{x:s,y:-l}]:r.has("right")&&r.has("up")?[{x:0,y:0},{x:s,y:-i},{x:0,y:-n}]:r.has("right")&&r.has("down")?[{x:0,y:0},{x:s,y:0},{x:0,y:-n}]:r.has("left")&&r.has("up")?[{x:s,y:0},{x:0,y:-i},{x:s,y:-n}]:r.has("left")&&r.has("down")?[{x:s,y:0},{x:0,y:0},{x:s,y:-n}]:r.has("right")?[{x:i,y:-l},{x:i,y:-l},{x:s-i,y:-l},{x:s-i,y:0},{x:s,y:-n/2},{x:s-i,y:-n},{x:s-i,y:-n+l},{x:i,y:-n+l},{x:i,y:-n+l}]:r.has("left")?[{x:i,y:0},{x:i,y:-l},{x:s-i,y:-l},{x:s-i,y:-n+l},{x:i,y:-n+l},{x:i,y:-n},{x:0,y:-n/2}]:r.has("up")?[{x:i,y:-l},{x:i,y:-n+l},{x:0,y:-n+l},{x:s/2,y:-n},{x:s,y:-n+l},{x:s-i,y:-n+l},{x:s-i,y:-l}]:r.has("down")?[{x:s/2,y:0},{x:0,y:-l},{x:i,y:-l},{x:i,y:-n+l},{x:s-i,y:-n+l},{x:s-i,y:-l},{x:s,y:-l}]:[{x:0,y:0}]},formatClass=t=>t?" "+t:"",getClassesFromNode=(t,e)=>`${e||"node default"}${formatClass(t.classes)} ${formatClass(t.class)}`,question=async(t,e)=>{const{shapeSvg:a,bbox:n}=await labelHelper(t,e,getClassesFromNode(e,void 0),!0),i=n.width+e.padding+(n.height+e.padding),s=[{x:i/2,y:0},{x:i,y:-i/2},{x:i/2,y:-i},{x:0,y:-i/2}];r.l.info("Question main (Circle)");const o=insertPolygonShape(a,i,i,s);return o.attr("style",e.style),updateNodeBounds(e,o),e.intersect=function(t){return r.l.warn("Intersect called"),l.polygon(e,s,t)},a};function applyNodePropertyBorders(t,e,a,n){const i=[],addBorder=t=>{i.push(t,0)},skipBorder=t=>{i.push(0,t)};e.includes("t")?(r.l.debug("add top border"),addBorder(a)):skipBorder(a),e.includes("r")?(r.l.debug("add right border"),addBorder(n)):skipBorder(n),e.includes("b")?(r.l.debug("add bottom border"),addBorder(a)):skipBorder(a),e.includes("l")?(r.l.debug("add left border"),addBorder(n)):skipBorder(n),t.attr("stroke-dasharray",i.join(" "))}const forkJoin=(t,e,a)=>{const r=t.insert("g").attr("class","node default").attr("id",e.domId||e.id);let n=70,i=10;"LR"===a&&(n=10,i=70);const s=r.append("rect").attr("x",-1*n/2).attr("y",-1*i/2).attr("width",n).attr("height",i).attr("class","fork-join");return updateNodeBounds(e,s),e.height=e.height+e.padding/2,e.width=e.width+e.padding/2,e.intersect=function(t){return l.rect(e,t)},r},o={rhombus:question,composite:async(t,e)=>{const{shapeSvg:a,bbox:n,halfPadding:i}=await labelHelper(t,e,"node "+e.classes,!0),s=a.insert("rect",":first-child"),o=e.positioned?e.width:n.width+e.padding,d=e.positioned?e.height:n.height+e.padding,h=e.positioned?-o/2:-n.width/2-i,c=e.positioned?-d/2:-n.height/2-i;if(s.attr("class","basic cluster composite label-container").attr("style",e.style).attr("rx",e.rx).attr("ry",e.ry).attr("x",h).attr("y",c).attr("width",o).attr("height",d),e.props){const t=new Set(Object.keys(e.props));e.props.borders&&(applyNodePropertyBorders(s,e.props.borders,o,d),t.delete("borders")),t.forEach(t=>{r.l.warn(`Unknown node property ${t}`)})}return updateNodeBounds(e,s),e.intersect=function(t){return l.rect(e,t)},a},question,rect:async(t,e)=>{const{shapeSvg:a,bbox:n,halfPadding:i}=await labelHelper(t,e,"node "+e.classes+" "+e.class,!0),s=a.insert("rect",":first-child"),o=e.positioned?e.width:n.width+e.padding,d=e.positioned?e.height:n.height+e.padding,h=e.positioned?-o/2:-n.width/2-i,c=e.positioned?-d/2:-n.height/2-i;if(s.attr("class","basic label-container").attr("style",e.style).attr("rx",e.rx).attr("ry",e.ry).attr("x",h).attr("y",c).attr("width",o).attr("height",d),e.props){const t=new Set(Object.keys(e.props));e.props.borders&&(applyNodePropertyBorders(s,e.props.borders,o,d),t.delete("borders")),t.forEach(t=>{r.l.warn(`Unknown node property ${t}`)})}return updateNodeBounds(e,s),e.intersect=function(t){return l.rect(e,t)},a},labelRect:async(t,e)=>{const{shapeSvg:a}=await labelHelper(t,e,"label",!0);r.l.trace("Classes = ",e.class);const n=a.insert("rect",":first-child");if(n.attr("width",0).attr("height",0),a.attr("class","label edgeLabel"),e.props){const t=new Set(Object.keys(e.props));e.props.borders&&(applyNodePropertyBorders(n,e.props.borders,0,0),t.delete("borders")),t.forEach(t=>{r.l.warn(`Unknown node property ${t}`)})}return updateNodeBounds(e,n),e.intersect=function(t){return l.rect(e,t)},a},rectWithTitle:(t,e)=>{let a;a=e.classes?"node "+e.classes:"node default";const i=t.insert("g").attr("class",a).attr("id",e.domId||e.id),s=i.insert("rect",":first-child"),o=i.insert("line"),d=i.insert("g").attr("class","label"),h=e.labelText.flat?e.labelText.flat():e.labelText;let c="";c="object"==typeof h?h[0]:h,r.l.info("Label text abc79",c,h,"object"==typeof h);const y=d.node().appendChild(createLabel$1(c,e.labelStyle,!0,!0));let p={width:0,height:0};if((0,r.m)((0,r.c)().flowchart.htmlLabels)){const t=y.children[0],e=(0,n.Ltv)(y);p=t.getBoundingClientRect(),e.attr("width",p.width),e.attr("height",p.height)}r.l.info("Text 2",h);const g=h.slice(1,h.length);let x=y.getBBox();const f=d.node().appendChild(createLabel$1(g.join?g.join("<br/>"):g,e.labelStyle,!0,!0));if((0,r.m)((0,r.c)().flowchart.htmlLabels)){const t=f.children[0],e=(0,n.Ltv)(f);p=t.getBoundingClientRect(),e.attr("width",p.width),e.attr("height",p.height)}const u=e.padding/2;return(0,n.Ltv)(f).attr("transform","translate( "+(p.width>x.width?0:(x.width-p.width)/2)+", "+(x.height+u+5)+")"),(0,n.Ltv)(y).attr("transform","translate( "+(p.width<x.width?0:-(x.width-p.width)/2)+", 0)"),p=d.node().getBBox(),d.attr("transform","translate("+-p.width/2+", "+(-p.height/2-u+3)+")"),s.attr("class","outer title-state").attr("x",-p.width/2-u).attr("y",-p.height/2-u).attr("width",p.width+e.padding).attr("height",p.height+e.padding),o.attr("class","divider").attr("x1",-p.width/2-u).attr("x2",p.width/2+u).attr("y1",-p.height/2-u+x.height+u).attr("y2",-p.height/2-u+x.height+u),updateNodeBounds(e,s),e.intersect=function(t){return l.rect(e,t)},i},choice:(t,e)=>{const a=t.insert("g").attr("class","node default").attr("id",e.domId||e.id),r=[{x:0,y:14},{x:14,y:0},{x:0,y:-14},{x:-14,y:0}];return a.insert("polygon",":first-child").attr("points",r.map(function(t){return t.x+","+t.y}).join(" ")).attr("class","state-start").attr("r",7).attr("width",28).attr("height",28),e.width=28,e.height=28,e.intersect=function(t){return l.circle(e,14,t)},a},circle:async(t,e)=>{const{shapeSvg:a,bbox:n,halfPadding:i}=await labelHelper(t,e,getClassesFromNode(e,void 0),!0),s=a.insert("circle",":first-child");return s.attr("style",e.style).attr("rx",e.rx).attr("ry",e.ry).attr("r",n.width/2+i).attr("width",n.width+e.padding).attr("height",n.height+e.padding),r.l.info("Circle main"),updateNodeBounds(e,s),e.intersect=function(t){return r.l.info("Circle intersect",e,n.width/2+i,t),l.circle(e,n.width/2+i,t)},a},doublecircle:async(t,e)=>{const{shapeSvg:a,bbox:n,halfPadding:i}=await labelHelper(t,e,getClassesFromNode(e,void 0),!0),s=a.insert("g",":first-child"),o=s.insert("circle"),d=s.insert("circle");return s.attr("class",e.class),o.attr("style",e.style).attr("rx",e.rx).attr("ry",e.ry).attr("r",n.width/2+i+5).attr("width",n.width+e.padding+10).attr("height",n.height+e.padding+10),d.attr("style",e.style).attr("rx",e.rx).attr("ry",e.ry).attr("r",n.width/2+i).attr("width",n.width+e.padding).attr("height",n.height+e.padding),r.l.info("DoubleCircle main"),updateNodeBounds(e,o),e.intersect=function(t){return r.l.info("DoubleCircle intersect",e,n.width/2+i+5,t),l.circle(e,n.width/2+i+5,t)},a},stadium:async(t,e)=>{const{shapeSvg:a,bbox:r}=await labelHelper(t,e,getClassesFromNode(e,void 0),!0),n=r.height+e.padding,i=r.width+n/4+e.padding,s=a.insert("rect",":first-child").attr("style",e.style).attr("rx",n/2).attr("ry",n/2).attr("x",-i/2).attr("y",-n/2).attr("width",i).attr("height",n);return updateNodeBounds(e,s),e.intersect=function(t){return l.rect(e,t)},a},hexagon:async(t,e)=>{const{shapeSvg:a,bbox:r}=await labelHelper(t,e,getClassesFromNode(e,void 0),!0),n=r.height+e.padding,i=n/4,s=r.width+2*i+e.padding,o=[{x:i,y:0},{x:s-i,y:0},{x:s,y:-n/2},{x:s-i,y:-n},{x:i,y:-n},{x:0,y:-n/2}],d=insertPolygonShape(a,s,n,o);return d.attr("style",e.style),updateNodeBounds(e,d),e.intersect=function(t){return l.polygon(e,o,t)},a},block_arrow:async(t,e)=>{const{shapeSvg:a,bbox:r}=await labelHelper(t,e,void 0,!0),n=r.height+2*e.padding,i=n/2,s=r.width+2*i+e.padding,o=getArrowPoints(e.directions,r,e),d=insertPolygonShape(a,s,n,o);return d.attr("style",e.style),updateNodeBounds(e,d),e.intersect=function(t){return l.polygon(e,o,t)},a},rect_left_inv_arrow:async(t,e)=>{const{shapeSvg:a,bbox:r}=await labelHelper(t,e,getClassesFromNode(e,void 0),!0),n=r.width+e.padding,i=r.height+e.padding,s=[{x:-i/2,y:0},{x:n,y:0},{x:n,y:-i},{x:-i/2,y:-i},{x:0,y:-i/2}];return insertPolygonShape(a,n,i,s).attr("style",e.style),e.width=n+i,e.height=i,e.intersect=function(t){return l.polygon(e,s,t)},a},lean_right:async(t,e)=>{const{shapeSvg:a,bbox:r}=await labelHelper(t,e,getClassesFromNode(e),!0),n=r.width+e.padding,i=r.height+e.padding,s=[{x:-2*i/6,y:0},{x:n-i/6,y:0},{x:n+2*i/6,y:-i},{x:i/6,y:-i}],o=insertPolygonShape(a,n,i,s);return o.attr("style",e.style),updateNodeBounds(e,o),e.intersect=function(t){return l.polygon(e,s,t)},a},lean_left:async(t,e)=>{const{shapeSvg:a,bbox:r}=await labelHelper(t,e,getClassesFromNode(e,void 0),!0),n=r.width+e.padding,i=r.height+e.padding,s=[{x:2*i/6,y:0},{x:n+i/6,y:0},{x:n-2*i/6,y:-i},{x:-i/6,y:-i}],o=insertPolygonShape(a,n,i,s);return o.attr("style",e.style),updateNodeBounds(e,o),e.intersect=function(t){return l.polygon(e,s,t)},a},trapezoid:async(t,e)=>{const{shapeSvg:a,bbox:r}=await labelHelper(t,e,getClassesFromNode(e,void 0),!0),n=r.width+e.padding,i=r.height+e.padding,s=[{x:-2*i/6,y:0},{x:n+2*i/6,y:0},{x:n-i/6,y:-i},{x:i/6,y:-i}],o=insertPolygonShape(a,n,i,s);return o.attr("style",e.style),updateNodeBounds(e,o),e.intersect=function(t){return l.polygon(e,s,t)},a},inv_trapezoid:async(t,e)=>{const{shapeSvg:a,bbox:r}=await labelHelper(t,e,getClassesFromNode(e,void 0),!0),n=r.width+e.padding,i=r.height+e.padding,s=[{x:i/6,y:0},{x:n-i/6,y:0},{x:n+2*i/6,y:-i},{x:-2*i/6,y:-i}],o=insertPolygonShape(a,n,i,s);return o.attr("style",e.style),updateNodeBounds(e,o),e.intersect=function(t){return l.polygon(e,s,t)},a},rect_right_inv_arrow:async(t,e)=>{const{shapeSvg:a,bbox:r}=await labelHelper(t,e,getClassesFromNode(e,void 0),!0),n=r.width+e.padding,i=r.height+e.padding,s=[{x:0,y:0},{x:n+i/2,y:0},{x:n,y:-i/2},{x:n+i/2,y:-i},{x:0,y:-i}],o=insertPolygonShape(a,n,i,s);return o.attr("style",e.style),updateNodeBounds(e,o),e.intersect=function(t){return l.polygon(e,s,t)},a},cylinder:async(t,e)=>{const{shapeSvg:a,bbox:r}=await labelHelper(t,e,getClassesFromNode(e,void 0),!0),n=r.width+e.padding,i=n/2,s=i/(2.5+n/50),o=r.height+s+e.padding,d="M 0,"+s+" a "+i+","+s+" 0,0,0 "+n+" 0 a "+i+","+s+" 0,0,0 "+-n+" 0 l 0,"+o+" a "+i+","+s+" 0,0,0 "+n+" 0 l 0,"+-o,h=a.attr("label-offset-y",s).insert("path",":first-child").attr("style",e.style).attr("d",d).attr("transform","translate("+-n/2+","+-(o/2+s)+")");return updateNodeBounds(e,h),e.intersect=function(t){const a=l.rect(e,t),r=a.x-e.x;if(0!=i&&(Math.abs(r)<e.width/2||Math.abs(r)==e.width/2&&Math.abs(a.y-e.y)>e.height/2-s)){let n=s*s*(1-r*r/(i*i));0!=n&&(n=Math.sqrt(n)),n=s-n,t.y-e.y>0&&(n=-n),a.y+=n}return a},a},start:(t,e)=>{const a=t.insert("g").attr("class","node default").attr("id",e.domId||e.id),r=a.insert("circle",":first-child");return r.attr("class","state-start").attr("r",7).attr("width",14).attr("height",14),updateNodeBounds(e,r),e.intersect=function(t){return l.circle(e,7,t)},a},end:(t,e)=>{const a=t.insert("g").attr("class","node default").attr("id",e.domId||e.id),r=a.insert("circle",":first-child"),n=a.insert("circle",":first-child");return n.attr("class","state-start").attr("r",7).attr("width",14).attr("height",14),r.attr("class","state-end").attr("r",5).attr("width",10).attr("height",10),updateNodeBounds(e,n),e.intersect=function(t){return l.circle(e,7,t)},a},note:async(t,e)=>{e.useHtmlLabels||(0,r.c)().flowchart.htmlLabels||(e.centerLabel=!0);const{shapeSvg:a,bbox:n,halfPadding:i}=await labelHelper(t,e,"node "+e.classes,!0);r.l.info("Classes = ",e.classes);const s=a.insert("rect",":first-child");return s.attr("rx",e.rx).attr("ry",e.ry).attr("x",-n.width/2-i).attr("y",-n.height/2-i).attr("width",n.width+e.padding).attr("height",n.height+e.padding),updateNodeBounds(e,s),e.intersect=function(t){return l.rect(e,t)},a},subroutine:async(t,e)=>{const{shapeSvg:a,bbox:r}=await labelHelper(t,e,getClassesFromNode(e,void 0),!0),n=r.width+e.padding,i=r.height+e.padding,s=[{x:0,y:0},{x:n,y:0},{x:n,y:-i},{x:0,y:-i},{x:0,y:0},{x:-8,y:0},{x:n+8,y:0},{x:n+8,y:-i},{x:-8,y:-i},{x:-8,y:0}],o=insertPolygonShape(a,n,i,s);return o.attr("style",e.style),updateNodeBounds(e,o),e.intersect=function(t){return l.polygon(e,s,t)},a},fork:forkJoin,join:forkJoin,class_box:(t,e)=>{const a=e.padding/2;let i;i=e.classes?"node "+e.classes:"node default";const s=t.insert("g").attr("class",i).attr("id",e.domId||e.id),o=s.insert("rect",":first-child"),d=s.insert("line"),h=s.insert("line");let c=0,y=4;const p=s.insert("g").attr("class","label");let g=0;const x=e.classData.annotations&&e.classData.annotations[0],f=e.classData.annotations[0]?"«"+e.classData.annotations[0]+"»":"",u=p.node().appendChild(createLabel$1(f,e.labelStyle,!0,!0));let w=u.getBBox();if((0,r.m)((0,r.c)().flowchart.htmlLabels)){const t=u.children[0],e=(0,n.Ltv)(u);w=t.getBoundingClientRect(),e.attr("width",w.width),e.attr("height",w.height)}e.classData.annotations[0]&&(y+=w.height+4,c+=w.width);let b=e.classData.label;void 0!==e.classData.type&&""!==e.classData.type&&((0,r.c)().flowchart.htmlLabels?b+="&lt;"+e.classData.type+"&gt;":b+="<"+e.classData.type+">");const m=p.node().appendChild(createLabel$1(b,e.labelStyle,!0,!0));(0,n.Ltv)(m).attr("class","classTitle");let k=m.getBBox();if((0,r.m)((0,r.c)().flowchart.htmlLabels)){const t=m.children[0],e=(0,n.Ltv)(m);k=t.getBoundingClientRect(),e.attr("width",k.width),e.attr("height",k.height)}y+=k.height+4,k.width>c&&(c=k.width);const L=[];e.classData.members.forEach(t=>{const a=t.getDisplayDetails();let i=a.displayText;(0,r.c)().flowchart.htmlLabels&&(i=i.replace(/</g,"&lt;").replace(/>/g,"&gt;"));const s=p.node().appendChild(createLabel$1(i,a.cssStyle?a.cssStyle:e.labelStyle,!0,!0));let l=s.getBBox();if((0,r.m)((0,r.c)().flowchart.htmlLabels)){const t=s.children[0],e=(0,n.Ltv)(s);l=t.getBoundingClientRect(),e.attr("width",l.width),e.attr("height",l.height)}l.width>c&&(c=l.width),y+=l.height+4,L.push(s)}),y+=8;const v=[];if(e.classData.methods.forEach(t=>{const a=t.getDisplayDetails();let i=a.displayText;(0,r.c)().flowchart.htmlLabels&&(i=i.replace(/</g,"&lt;").replace(/>/g,"&gt;"));const s=p.node().appendChild(createLabel$1(i,a.cssStyle?a.cssStyle:e.labelStyle,!0,!0));let l=s.getBBox();if((0,r.m)((0,r.c)().flowchart.htmlLabels)){const t=s.children[0],e=(0,n.Ltv)(s);l=t.getBoundingClientRect(),e.attr("width",l.width),e.attr("height",l.height)}l.width>c&&(c=l.width),y+=l.height+4,v.push(s)}),y+=8,x){let t=(c-w.width)/2;(0,n.Ltv)(u).attr("transform","translate( "+(-1*c/2+t)+", "+-1*y/2+")"),g=w.height+4}let S=(c-k.width)/2;return(0,n.Ltv)(m).attr("transform","translate( "+(-1*c/2+S)+", "+(-1*y/2+g)+")"),g+=k.height+4,d.attr("class","divider").attr("x1",-c/2-a).attr("x2",c/2+a).attr("y1",-y/2-a+8+g).attr("y2",-y/2-a+8+g),g+=8,L.forEach(t=>{(0,n.Ltv)(t).attr("transform","translate( "+-c/2+", "+(-1*y/2+g+4)+")");const e=null==t?void 0:t.getBBox();g+=((null==e?void 0:e.height)??0)+4}),g+=8,h.attr("class","divider").attr("x1",-c/2-a).attr("x2",c/2+a).attr("y1",-y/2-a+8+g).attr("y2",-y/2-a+8+g),g+=8,v.forEach(t=>{(0,n.Ltv)(t).attr("transform","translate( "+-c/2+", "+(-1*y/2+g)+")");const e=null==t?void 0:t.getBBox();g+=((null==e?void 0:e.height)??0)+4}),o.attr("style",e.style).attr("class","outer title-state").attr("x",-c/2-a).attr("y",-y/2-a).attr("width",c+e.padding).attr("height",y+e.padding),updateNodeBounds(e,o),e.intersect=function(t){return l.rect(e,t)},s}};let d={};const insertNode=async(t,e,a)=>{let n,i;if(e.link){let s;"sandbox"===(0,r.c)().securityLevel?s="_top":e.linkTarget&&(s=e.linkTarget||"_blank"),n=t.insert("svg:a").attr("xlink:href",e.link).attr("target",s),i=await o[e.shape](n,e,a)}else i=await o[e.shape](t,e,a),n=i;return e.tooltip&&i.attr("title",e.tooltip),e.class&&i.attr("class","node default "+e.class),n.attr("data-node","true"),n.attr("data-id",e.id),d[e.id]=n,e.haveCallback&&d[e.id].attr("class",d[e.id].attr("class")+" clickable"),n},setNodeElem=(t,e)=>{d[e.id]=t},clear$1=()=>{d={}},positionNode=t=>{const e=d[t.id];r.l.trace("Transforming node",t.diff,t,"translate("+(t.x-t.width/2-5)+", "+t.width/2+")");const a=t.diff||0;return t.clusterNode?e.attr("transform","translate("+(t.x+a-t.width/2)+", "+(t.y-t.height/2-8)+")"):e.attr("transform","translate("+t.x+", "+t.y+")"),a},getSubGraphTitleMargins=({flowchart:t})=>{var e,a;const r=(null==(e=null==t?void 0:t.subGraphTitleMargin)?void 0:e.top)??0,n=(null==(a=null==t?void 0:t.subGraphTitleMargin)?void 0:a.bottom)??0;return{subGraphTitleTopMargin:r,subGraphTitleBottomMargin:n,subGraphTitleTotalMargin:r+n}},h={aggregation:18,extension:18,composition:18,dependency:6,lollipop:13.5,arrow_point:5.3};function calculateDeltaAndAngle(t,e){if(void 0===t||void 0===e)return{angle:0,deltaX:0,deltaY:0};t=pointTransformer(t),e=pointTransformer(e);const[a,r]=[t.x,t.y],[n,i]=[e.x,e.y],s=n-a,l=i-r;return{angle:Math.atan(l/s),deltaX:s,deltaY:l}}const pointTransformer=t=>Array.isArray(t)?{x:t[0],y:t[1]}:t,getLineFunctionsWithOffset=t=>({x:function(e,a,r){let n=0;if(0===a&&Object.hasOwn(h,t.arrowTypeStart)){const{angle:e,deltaX:a}=calculateDeltaAndAngle(r[0],r[1]);n=h[t.arrowTypeStart]*Math.cos(e)*(a>=0?1:-1)}else if(a===r.length-1&&Object.hasOwn(h,t.arrowTypeEnd)){const{angle:e,deltaX:a}=calculateDeltaAndAngle(r[r.length-1],r[r.length-2]);n=h[t.arrowTypeEnd]*Math.cos(e)*(a>=0?1:-1)}return pointTransformer(e).x+n},y:function(e,a,r){let n=0;if(0===a&&Object.hasOwn(h,t.arrowTypeStart)){const{angle:e,deltaY:a}=calculateDeltaAndAngle(r[0],r[1]);n=h[t.arrowTypeStart]*Math.abs(Math.sin(e))*(a>=0?1:-1)}else if(a===r.length-1&&Object.hasOwn(h,t.arrowTypeEnd)){const{angle:e,deltaY:a}=calculateDeltaAndAngle(r[r.length-1],r[r.length-2]);n=h[t.arrowTypeEnd]*Math.abs(Math.sin(e))*(a>=0?1:-1)}return pointTransformer(e).y+n}}),addEdgeMarkers=(t,e,a,r,n)=>{e.arrowTypeStart&&addEdgeMarker(t,"start",e.arrowTypeStart,a,r,n),e.arrowTypeEnd&&addEdgeMarker(t,"end",e.arrowTypeEnd,a,r,n)},c={arrow_cross:"cross",arrow_point:"point",arrow_barb:"barb",arrow_circle:"circle",aggregation:"aggregation",extension:"extension",composition:"composition",dependency:"dependency",lollipop:"lollipop"},addEdgeMarker=(t,e,a,n,i,s)=>{const l=c[a];if(!l)return void r.l.warn(`Unknown arrow type: ${a}`);const o="start"===e?"Start":"End";t.attr(`marker-${e}`,`url(${n}#${i}_${s}-${l}${o})`)};let y={},p={};const clear=()=>{y={},p={}},insertEdgeLabel=(t,e)=>{const a=(0,r.m)((0,r.c)().flowchart.htmlLabels),s="markdown"===e.labelType?(0,i.a)(t,e.label,{style:e.labelStyle,useHtmlLabels:a,addSvgBackground:!0}):createLabel$1(e.label,e.labelStyle),l=t.insert("g").attr("class","edgeLabel"),o=l.insert("g").attr("class","label");o.node().appendChild(s);let d,h=s.getBBox();if(a){const t=s.children[0],e=(0,n.Ltv)(s);h=t.getBoundingClientRect(),e.attr("width",h.width),e.attr("height",h.height)}if(o.attr("transform","translate("+-h.width/2+", "+-h.height/2+")"),y[e.id]=l,e.width=h.width,e.height=h.height,e.startLabelLeft){const a=createLabel$1(e.startLabelLeft,e.labelStyle),r=t.insert("g").attr("class","edgeTerminals"),n=r.insert("g").attr("class","inner");d=n.node().appendChild(a);const i=a.getBBox();n.attr("transform","translate("+-i.width/2+", "+-i.height/2+")"),p[e.id]||(p[e.id]={}),p[e.id].startLeft=r,setTerminalWidth(d,e.startLabelLeft)}if(e.startLabelRight){const a=createLabel$1(e.startLabelRight,e.labelStyle),r=t.insert("g").attr("class","edgeTerminals"),n=r.insert("g").attr("class","inner");d=r.node().appendChild(a),n.node().appendChild(a);const i=a.getBBox();n.attr("transform","translate("+-i.width/2+", "+-i.height/2+")"),p[e.id]||(p[e.id]={}),p[e.id].startRight=r,setTerminalWidth(d,e.startLabelRight)}if(e.endLabelLeft){const a=createLabel$1(e.endLabelLeft,e.labelStyle),r=t.insert("g").attr("class","edgeTerminals"),n=r.insert("g").attr("class","inner");d=n.node().appendChild(a);const i=a.getBBox();n.attr("transform","translate("+-i.width/2+", "+-i.height/2+")"),r.node().appendChild(a),p[e.id]||(p[e.id]={}),p[e.id].endLeft=r,setTerminalWidth(d,e.endLabelLeft)}if(e.endLabelRight){const a=createLabel$1(e.endLabelRight,e.labelStyle),r=t.insert("g").attr("class","edgeTerminals"),n=r.insert("g").attr("class","inner");d=n.node().appendChild(a);const i=a.getBBox();n.attr("transform","translate("+-i.width/2+", "+-i.height/2+")"),r.node().appendChild(a),p[e.id]||(p[e.id]={}),p[e.id].endRight=r,setTerminalWidth(d,e.endLabelRight)}return s};function setTerminalWidth(t,e){(0,r.c)().flowchart.htmlLabels&&t&&(t.style.width=9*e.length+"px",t.style.height="12px")}const positionEdgeLabel=(t,e)=>{r.l.debug("Moving label abc88 ",t.id,t.label,y[t.id],e);let a=e.updatedPath?e.updatedPath:e.originalPath;const n=(0,r.c)(),{subGraphTitleTotalMargin:i}=getSubGraphTitleMargins(n);if(t.label){const n=y[t.id];let s=t.x,l=t.y;if(a){const n=r.u.calcLabelPosition(a);r.l.debug("Moving label "+t.label+" from (",s,",",l,") to (",n.x,",",n.y,") abc88"),e.updatedPath&&(s=n.x,l=n.y)}n.attr("transform",`translate(${s}, ${l+i/2})`)}if(t.startLabelLeft){const e=p[t.id].startLeft;let n=t.x,i=t.y;if(a){const e=r.u.calcTerminalLabelPosition(t.arrowTypeStart?10:0,"start_left",a);n=e.x,i=e.y}e.attr("transform",`translate(${n}, ${i})`)}if(t.startLabelRight){const e=p[t.id].startRight;let n=t.x,i=t.y;if(a){const e=r.u.calcTerminalLabelPosition(t.arrowTypeStart?10:0,"start_right",a);n=e.x,i=e.y}e.attr("transform",`translate(${n}, ${i})`)}if(t.endLabelLeft){const e=p[t.id].endLeft;let n=t.x,i=t.y;if(a){const e=r.u.calcTerminalLabelPosition(t.arrowTypeEnd?10:0,"end_left",a);n=e.x,i=e.y}e.attr("transform",`translate(${n}, ${i})`)}if(t.endLabelRight){const e=p[t.id].endRight;let n=t.x,i=t.y;if(a){const e=r.u.calcTerminalLabelPosition(t.arrowTypeEnd?10:0,"end_right",a);n=e.x,i=e.y}e.attr("transform",`translate(${n}, ${i})`)}},cutPathAtIntersect=(t,e)=>{r.l.debug("abc88 cutPathAtIntersect",t,e);let a=[],n=t[0],i=!1;return t.forEach(t=>{if(((t,e)=>{const a=t.x,r=t.y,n=Math.abs(e.x-a),i=Math.abs(e.y-r),s=t.width/2,l=t.height/2;return n>=s||i>=l})(e,t)||i)n=t,i||a.push(t);else{const s=((t,e,a)=>{r.l.debug(`intersection calc abc89:\n  outsidePoint: ${JSON.stringify(e)}\n  insidePoint : ${JSON.stringify(a)}\n  node        : x:${t.x} y:${t.y} w:${t.width} h:${t.height}`);const n=t.x,i=t.y,s=Math.abs(n-a.x),l=t.width/2;let o=a.x<e.x?l-s:l+s;const d=t.height/2,h=Math.abs(e.y-a.y),c=Math.abs(e.x-a.x);if(Math.abs(i-e.y)*l>Math.abs(n-e.x)*d){let t=a.y<e.y?e.y-d-i:i-d-e.y;o=c*t/h;const n={x:a.x<e.x?a.x+o:a.x-c+o,y:a.y<e.y?a.y+h-t:a.y-h+t};return 0===o&&(n.x=e.x,n.y=e.y),0===c&&(n.x=e.x),0===h&&(n.y=e.y),r.l.debug(`abc89 topp/bott calc, Q ${h}, q ${t}, R ${c}, r ${o}`,n),n}{o=a.x<e.x?e.x-l-n:n-l-e.x;let t=h*o/c,i=a.x<e.x?a.x+c-o:a.x-c+o,s=a.y<e.y?a.y+t:a.y-t;return r.l.debug(`sides calc abc89, Q ${h}, q ${t}, R ${c}, r ${o}`,{_x:i,_y:s}),0===o&&(i=e.x,s=e.y),0===c&&(i=e.x),0===h&&(s=e.y),{x:i,y:s}}})(e,n,t);let l=!1;a.forEach(t=>{l=l||t.x===s.x&&t.y===s.y}),a.some(t=>t.x===s.x&&t.y===s.y)||a.push(s),i=!0}}),a},insertEdge=function(t,e,a,i,s,l,o){let d=a.points;r.l.debug("abc88 InsertEdge: edge=",a,"e=",e);let h=!1;const c=l.node(e.v);var y=l.node(e.w);(null==y?void 0:y.intersect)&&(null==c?void 0:c.intersect)&&(d=d.slice(1,a.points.length-1),d.unshift(c.intersect(d[0])),d.push(y.intersect(d[d.length-1]))),a.toCluster&&(r.l.debug("to cluster abc88",i[a.toCluster]),d=cutPathAtIntersect(a.points,i[a.toCluster].node),h=!0),a.fromCluster&&(r.l.debug("from cluster abc88",i[a.fromCluster]),d=cutPathAtIntersect(d.reverse(),i[a.fromCluster].node).reverse(),h=!0);const p=d.filter(t=>!Number.isNaN(t.y));let g=n.qrM;!a.curve||"graph"!==s&&"flowchart"!==s||(g=a.curve);const{x,y:f}=getLineFunctionsWithOffset(a),u=(0,n.n8j)().x(x).y(f).curve(g);let w;switch(a.thickness){case"normal":w="edge-thickness-normal";break;case"thick":case"invisible":w="edge-thickness-thick";break;default:w=""}switch(a.pattern){case"solid":w+=" edge-pattern-solid";break;case"dotted":w+=" edge-pattern-dotted";break;case"dashed":w+=" edge-pattern-dashed"}const b=t.append("path").attr("d",u(p)).attr("id",a.id).attr("class"," "+w+(a.classes?" "+a.classes:"")).attr("style",a.style);let m="";((0,r.c)().flowchart.arrowMarkerAbsolute||(0,r.c)().state.arrowMarkerAbsolute)&&(m=window.location.protocol+"//"+window.location.host+window.location.pathname+window.location.search,m=m.replace(/\(/g,"\\("),m=m.replace(/\)/g,"\\)")),addEdgeMarkers(b,a,m,o,s);let k={};return h&&(k.updatedPath=d),k.originalPath=a.points,k}}}]);